#!/usr/bin/env python3
import os
import re
import sys


def convert_config_to_kconfig(filename):
    configs = {}
    with open(filename, "r") as file:
        lines = file.readlines()

    for line in lines:
        line = line.strip()
        if line.startswith("#define "):
            kv = line[8:]
            space_pos = kv.find(" ")
            key = kv[0:space_pos].strip()
            val = kv[space_pos:].strip()
            print("key:", key, "val:", val)
            config = ""
            if val == "1":
                configs[key] = "y"
            if val == "0":
                configs[key] = "n"
            elif re.match(r"\((-*[0-9]*\s*\**)+\)", val):
                val = val[1 : len(val) - 1]
                vals = val.split("*")
                multi = 1
                for subval in vals:
                    multi = multi * int(subval)
                configs[key] = str(multi)
            elif re.match(r"\'[A-Za-z]\'", val):
                val = val[1:2]
                configs[key] = str(ord(val))
            elif re.match(r"\"\w+.\w+\"", val):
                configs[key] = val

    return configs


def read_kconfig(filename):
    configs = {}
    with open(filename, "r") as file:
        lines = file.readlines()

    for line in lines:
        line = line.strip()
        if not line.startswith("#"):
            kv = line.split("=")
            key = kv[0].replace("CONFIG_", "")
            val = kv[1]
            if len(kv) == 2:
                configs[key] = val

    return configs


def merge_rewrite_map(filename, map1, map2):
    map1.update(map2)
    sorted_dict = {k: map1[k] for k in sorted(map1)}
    desc = """#
# This file is autogenerated: PLEASE DO NOT EDIT IT.
#
# You can use "make menuconfig" to make any modifications to the installed .config file.
# You can then do "make savedefconfig" to generate a new defconfig file that includes your
# modifications.
#
"""
    with open(filename, "w") as file:
        file.writelines(desc)
        for key, value in sorted_dict.items():
            file.write("".join(["CONFIG_", key, "=", value, "\n"]))


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(
            """usage: python check_config.py config.h defconfig defconfig_new
                 config.h: a header configuration file that you want to convert;
                 defconfig: a default configuration file
                 defconfig_new: a new configuration file that contains config.h and defconfig"""
        )
        sys.exit(1)

    filename = sys.argv[1]
    filename_kconfig = sys.argv[2]
    filename_kconfig_new = sys.argv[3]
    configs = convert_config_to_kconfig(filename)
    configs_def = read_kconfig(filename_kconfig)
    merge_rewrite_map(filename_kconfig_new, configs_def, configs)
